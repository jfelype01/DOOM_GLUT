#define _USE_MATH_DEFINES
#include <GL/glut.h>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <string>
const std::string ASSETS_PATH = "assets/";


#define res         1
#define SW          160*res
#define SH          120*res
#define SW2         (SW/2)
#define SH2         (SH/2)
#define pixelScale  4/res
#define GLSW        (SW*pixelScale)
#define GLSH        (SH*pixelScale)
#define numSect     88
#define numWall     660


using namespace std;

typedef struct {
    int lastX, lastY;
    int first;
    float sensibilidade;
    int mouse_dx;
    int mouse_dy;
} MOUSE;
MOUSE Mouse;


typedef struct {
    int frame1, frame2;
}TIME;
TIME T;

typedef struct {
    int w, s, a, d;
    int strafeLeft, strafeRight;
    int move;
}KEYS;
KEYS K;

typedef struct {
    double cos[360];
    double sin[360];
}MATH;
MATH M;

typedef struct {
    int x, y, z;
    int angle;
    int look;
} PLAYER;
PLAYER P;

typedef struct {
    int x1, y1;
    int x2, y2;
    int color;
    int d;
}WALLS;
WALLS W[660];

typedef struct {
    int ws, we;
    int z1, z2;
    int d;
    int c1, c2;
    int surf[SW];
    int surface;
}SECTORS;
SECTORS S[88];

GLuint floorTexture;

void pixel(int x, int y, int c) {
    int rgb[3];

    switch (c) {
    case 0:
        rgb[0] = 255; rgb[1] = 255; rgb[2] = 0; // Yellow
        break;
    case 1:
        rgb[0] = 160; rgb[1] = 160; rgb[2] = 0; // Yellow Darker
        break;
    case 2:
        rgb[0] = 0; rgb[1] = 255; rgb[2] = 0; // Green
        break;
    case 3:
        rgb[0] = 0; rgb[1] = 160; rgb[2] = 0; // Green Darker
        break;
    case 4:
        rgb[0] = 0; rgb[1] = 255; rgb[2] = 255; // Cyan
        break;
    case 5:
        rgb[0] = 0; rgb[1] = 160; rgb[2] = 160; // Cyan Darker
        break;
    case 6:
        rgb[0] = 160; rgb[1] = 100; rgb[2] = 0; // Brown
        break;
    case 7:
        rgb[0] = 110; rgb[1] = 50; rgb[2] = 0; // Brown Darker
        break;
    case 8:
        rgb[0] = 0; rgb[1] = 60; rgb[2] = 130; // background
        break;
    }
    glColor3ub(rgb[0], rgb[1], rgb[2]);;
    glBegin(GL_POINTS);
    glVertex2i(x * pixelScale + 2, y * pixelScale + 2);
    glEnd();
}

void mouseMotion(int x, int y) {
    const int centerX = GLSW / 2;
    const int centerY = GLSH / 2;
    const int threshold = 10;  // tolerância de movimento para evitar múltiplos warps

    if (Mouse.first) {
        Mouse.lastX = x;
        Mouse.lastY = y;
        Mouse.first = 0;
        return;
    }

    int dx = x - centerX;
    int dy = y - centerY;

    if (abs(dx) > threshold || abs(dy) > threshold) {
        P.angle += dx * Mouse.sensibilidade;
        if (P.angle >= 360) P.angle -= 360;
        if (P.angle < 0) P.angle += 360;

        P.look += dy * Mouse.sensibilidade;
        if (P.look > 90) P.look = 90;
        if (P.look < -90) P.look = -90;

        glutWarpPointer(centerX, centerY);

        Mouse.lastX = centerX;
        Mouse.lastY = centerY;
    }
}

// Adicione o protótipo da função antes de sua utilização
bool checaColisao(int nx, int ny);


void movePlayer() {
    int dx = M.sin[P.angle] * 10.0;
    int dy = M.cos[P.angle] * 10.0;

    int nx = P.x;
    int ny = P.y;

    if (K.w == 1 && K.move == 0) {
        nx += dx;
        ny += dy;
    }
    if (K.s == 1 && K.move == 0) {
        nx -= dx;
        ny -= dy;
    }
    if (K.a == 1 && K.move == 0) {
        nx -= dy;
        ny += dx;
    }
    if (K.d == 1 && K.move == 0) {
        nx += dy;
        ny -= dx;
    }

    // Modo 'm' (move vertical e look) permanece igual
    if (K.a == 1 && K.move == 1) {
        P.look -= 1;
    }
    if (K.d == 1 && K.move == 1) {
        P.look += 1;
    }
    if (K.w == 1 && K.move == 1) {
        P.z -= 4;
    }
    if (K.s == 1 && K.move == 1) {
        P.z += 4;
    }

    // Checa colisão antes de aplicar movimento
    if (!checaColisao(nx, ny)) {
        P.x = nx;
        P.y = ny;
    }
}

void clearBackground() {
    int x, y;
    for (y = 0; y < SH; y++) {
        for (x = 0; x < SW; x++) {
            pixel(x, y, 8);
        }
    }
}

void clipBehindPlayer(int* x1, int* y1, int* z1, int x2, int y2, int z2) {
    double da = *y1;
    double db = y2;
    double d = da - db;
    if (d == 0) {
        d = 1;
    }

    double s = da / d;
    *x1 = *x1 + s * (x2 - (*x1));
    *y1 = *y1 + s * (y2 - (*y1));
    if (*y1 == 0) {
        *y1 = 1;
    }
    *z1 = *z1 + s * (z2 - (*z1));

}


void drawWall(int x1, int x2, int b1, int b2, int t1, int t2, int color, int s) {
    int dx = x2 - x1;
    if (dx == 0) dx = 1;
    int dyb = b2 - b1;
    int dyt = t2 - t1;
    int xstep = x1;

    x1 = std::max(1, std::min(x1, SW - 1));
    x2 = std::max(1, std::min(x2, SW - 1));

    // Aplica textura apenas nas paredes do primeiro setor (s == 0)
    if (floorTexture != 0) {
        glEnable(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D, floorTexture);
        glColor3ub(255, 255, 255);

        glBegin(GL_QUADS);
        glTexCoord2f(0.0f, 0.0f); glVertex2i(x1 * pixelScale, b1 * pixelScale);
        glTexCoord2f(1.0f, 0.0f); glVertex2i(x2 * pixelScale, b2 * pixelScale);
        glTexCoord2f(1.0f, 1.0f); glVertex2i(x2 * pixelScale, t2 * pixelScale);
        glTexCoord2f(0.0f, 1.0f); glVertex2i(x1 * pixelScale, t1 * pixelScale);
        glEnd();

        glDisable(GL_TEXTURE_2D);
        return;
    }

    for (int x = x1; x < x2; x++) {
        int y1 = dyb * (x - xstep + 0.5) / dx + b1;
        int y2 = dyt * (x - xstep + 0.5) / dx + t1;

        y1 = std::max(1, std::min(y1, SH - 1));
        y2 = std::max(1, std::min(y2, SH - 1));

        if (S[s].surface == 1) { S[s].surf[x] = y1; continue; }
        if (S[s].surface == 2) { S[s].surf[x] = y2; continue; }
        if (S[s].surface == -1) { for (int y = S[s].surf[x]; y < y1; y++) pixel(x, y, S[s].c2); }
        if (S[s].surface == -2) { for (int y = y2; y < S[s].surf[x]; y++) pixel(x, y, S[s].c2); }
        for (int y = y1; y < y2; y++) pixel(x, y, color);
    }
}

int dist(int x1, int y1, int x2, int y2) {
    int distance = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    return distance;
}

void draw3D() {
    int s, w, loop, wx[4], wy[4], wz[4];
    double cos1 = M.cos[P.angle], sin1 = M.sin[P.angle];

    sort(S, S + numSect, [](const SECTORS& a, const SECTORS& b) {
        return a.d > b.d;
        });

    for (s = 0; s < numSect; s++) {
        sort(W + S[s].ws, W + S[s].we, [](const WALLS& a, const WALLS& b) {
            return a.d > b.d;
            });


        S[s].d = 0;

        if (P.z < S[s].z1) {
            S[s].surface = 1;
        }
        else if (P.z > S[s].z2) {
            S[s].surface = 2;
        }
        else {
            S[s].surface = 0;
        }

        for (loop = 0; loop < 2; loop++) {
            for (w = S[s].ws; w < S[s].we; w++) {

                int x1 = W[w].x1 - P.x, y1 = W[w].y1 - P.y;
                int x2 = W[w].x2 - P.x, y2 = W[w].y2 - P.y;

                if (loop == 0) {
                    swap(x1, x2);
                    swap(y1, y2);
                }

                wx[0] = x1 * cos1 - y1 * sin1;
                wx[1] = x2 * cos1 - y2 * sin1;
                wx[2] = wx[0];
                wx[3] = wx[1];

                wy[0] = y1 * cos1 + x1 * sin1;
                wy[1] = y2 * cos1 + x2 * sin1;
                wy[2] = wy[0];
                wy[3] = wy[1];

                W[w].d = dist(0, 0, (wx[0] + wx[1]) / 2, (wy[0] + wy[1]) / 2);
                S[s].d += W[w].d;

                wz[0] = S[s].z1 - P.z + ((P.look * wy[0]) / 32.0);
                wz[1] = S[s].z1 - P.z + ((P.look * wy[1]) / 32.0);
                wz[2] = wz[0] + S[s].z2;
                wz[3] = wz[1] + S[s].z2;

                if (wy[0] < 1 && wy[1] < 1) {
                    continue;
                }
                if (wy[0] < 1) {
                    clipBehindPlayer(&wx[0], &wy[0], &wz[0], wx[1], wy[1], wz[1]);
                    clipBehindPlayer(&wx[2], &wy[2], &wz[2], wx[3], wy[3], wz[3]);
                }
                if (wy[1] < 1) {
                    clipBehindPlayer(&wx[1], &wy[1], &wz[1], wx[0], wy[0], wz[0]);
                    clipBehindPlayer(&wx[3], &wy[3], &wz[3], wx[2], wy[2], wz[2]);
                }


                wx[0] = wx[0] * 200 / wy[0] + SW2;
                wy[0] = wz[0] * 200 / wy[0] + SH2;

                wx[1] = wx[1] * 200 / wy[1] + SW2;
                wy[1] = wz[1] * 200 / wy[1] + SH2;

                wx[2] = wx[2] * 200 / wy[2] + SW2;
                wy[2] = wz[2] * 200 / wy[2] + SH2;

                wx[3] = wx[3] * 200 / wy[3] + SW2;
                wy[3] = wz[3] * 200 / wy[3] + SH2;

                drawWall(wx[0], wx[1], wy[0], wy[1], wy[2], wy[3], W[w].color, s);
            }
            S[s].d /= (S[s].we - S[s].ws);
            S[s].surface *= -1;
        }
    }
}

void display() {
    int x, y;
    if (T.frame1 - T.frame2 >= 16) {
        clearBackground(); // fundo azul
        if (Mouse.mouse_dx != 0 || Mouse.mouse_dy != 0) {
            P.angle += Mouse.mouse_dx * Mouse.sensibilidade * 0.5f;
            if (P.angle >= 360) P.angle -= 360;
            if (P.angle < 0)    P.angle += 360;

            P.look += Mouse.mouse_dy * Mouse.sensibilidade * 0.5f;
            if (P.look > 90)   P.look = 90;
            if (P.look < -90)  P.look = -90;

            // limpa acumuladores
            Mouse.mouse_dx = 0;
            Mouse.mouse_dy = 0;
        }
        movePlayer();
        draw3D();
        T.frame2 = T.frame1;
        glutSwapBuffers();
    }

    T.frame1 = glutGet(GLUT_ELAPSED_TIME);
    glutPostRedisplay();
}

void KeysDown(unsigned char key, int x, int y) {
    if (key == 'w') {
        K.w = 1;
    }
    if (key == 's') {
        K.s = 1;
    }
    if (key == 'a') {
        K.a = 1;
    }
    if (key == 'd') {
        K.d = 1;
    }
    if (key == 'm') {
        K.move = 1;
    }
    if (key == ',') {
        K.strafeLeft = 1;
    }
    if (key == '.') {
        K.strafeRight = 1;
    }
}

void KeysUp(unsigned char key, int x, int y) {
    if (key == 'w') {
        K.w = 0;
    }
    if (key == 's') {
        K.s = 0;
    }
    if (key == 'a') {
        K.a = 0;
    }
    if (key == 'd') {
        K.d = 0;
    }
    if (key == 'm') {
        K.move = 0;
    }
    if (key == ',') {
        K.strafeLeft = 0;
    }
    if (key == '.') {
        K.strafeRight = 0;
    }
}

double pointToSegmentDistance(double px, double py, double x1, double y1, double x2, double y2) {
    double dx = x2 - x1;
    double dy = y2 - y1;
    double l2 = dx * dx + dy * dy;
    if (l2 == 0.0) {
        dx = px - x1;
        dy = py - y1;
        return sqrt(dx * dx + dy * dy);
    }

    double t = ((px - x1) * dx + (py - y1) * dy) / l2;
    t = std::max(0.0, std::min(1.0, t));

    double projX = x1 + t * dx;
    double projY = y1 + t * dy;

    dx = px - projX;
    dy = py - projY;

    return sqrt(dx * dx + dy * dy);
}


bool checaColisao(int nx, int ny) {
    const double radius = 8.0;

    for (int s = 0; s < numSect; s++) {
        if (S[s].ws < 0 || S[s].we > numWall) continue;

        for (int w = S[s].ws; w < S[s].we; w++) {
            if (w < 0 || w >= numWall) continue;

            double d = pointToSegmentDistance(static_cast<double>(nx),
                static_cast<double>(ny),
                static_cast<double>(W[w].x1),
                static_cast<double>(W[w].y1),
                static_cast<double>(W[w].x2),
                static_cast<double>(W[w].y2));
            if (d < radius) {
                return true; // colisão detectada
            }
        }
    }
    return false;
}

// Mapa E1M1

int loadSectors[] = { // ws, we, z1, z2, floorColor, ceilingColor
    0, 8, -80, 216, 0, 1,
    8, 37, -56, 216, 2, 3,
    37, 43, 0, 0, 4, 5,
    43, 47, 8, 192, 6, 7,
    47, 51, 0, 0, 8, 9,
    51, 55, 8, 192, 10, 11,
    55, 62, -136, -40, 12, 13,
    62, 66, -120, 16, 14, 15,
    66, 70, -104, 16, 0, 1,
    70, 74, -88, 16, 2, 3,
    74, 78, -72, 16, 4, 5,
    78, 83, -56, 24, 6, 7,
    83, 91, -56, 64, 8, 9,
    91, 97, -56, 16, 10, 11,
    97, 101, 32, 88, 12, 13,
    101, 133, 0, 224, 14, 15,
    133, 141, 0, 224, 0, 1,
    141, 145, 0, 96, 2, 3,
    145, 153, 0, 224, 4, 5,
    153, 157, 0, 96, 6, 7,
    157, 161, 8, 152, 8, 9,
    161, 173, 32, 88, 10, 11,
    173, 177, 0, 72, 12, 13,
    177, 183, 32, 88, 14, 15,
    183, 189, 0, 144, 0, 1,
    189, 193, 0, 88, 2, 3,
    193, 197, 0, 0, 4, 5,
    197, 209, -16, 200, 6, 7,
    209, 221, -8, 120, 8, 9,
    221, 250, 0, 72, 10, 11,
    250, 254, 0, 72, 12, 13,
    254, 264, -8, 120, 14, 15,
    264, 296, -8, 224, 0, 1,
    296, 300, 8, 224, 2, 3,
    300, 304, 24, 224, 4, 5,
    304, 308, 40, 184, 6, 7,
    308, 312, 40, 184, 8, 9,
    312, 316, 40, 224, 10, 11,
    316, 320, 56, 224, 12, 13,
    320, 324, 72, 224, 14, 15,
    324, 332, 0, 128, 0, 1,
    332, 350, 104, 264, 2, 3,
    350, 366, 0, 264, 4, 5,
    366, 370, 136, 240, 6, 7,
    370, 378, 128, 264, 8, 9,
    378, 382, 136, 240, 10, 11,
    382, 386, 136, 240, 12, 13,
    386, 394, 104, 192, 14, 15,
    394, 398, 88, 224, 0, 1,
    398, 407, -24, 176, 2, 3,
    407, 411, -16, 72, 4, 5,
    411, 414, -48, 176, 6, 7,
    414, 422, -24, 176, 8, 9,
    422, 433, -48, 176, 10, 11,
    433, 443, -48, 104, 12, 13,
    443, 448, 96, 176, 14, 15,
    448, 462, -24, 176, 0, 1,
    462, 469, -48, 176, 2, 3,
    469, 488, 104, 184, 4, 5,
    488, 492, 16, 152, 6, 7,
    492, 496, 24, 152, 8, 9,
    496, 502, -8, 72, 10, 11,
    502, 506, 0, 136, 12, 13,
    506, 510, -56, 24, 14, 15,
    510, 528, -24, 104, 0, 1,
    528, 546, -24, 48, 2, 3,
    546, 556, -24, 72, 4, 5,
    556, 560, -24, 56, 6, 7,
    560, 564, -24, 48, 8, 9,
    564, 568, -24, -24, 10, 11,
    568, 580, -24, 88, 12, 13,
    580, 584, -24, 72, 14, 15,
    584, 588, -24, 48, 0, 1,
    588, 592, -104, 48, 2, 3,
    592, 596, -88, 48, 4, 5,
    596, 600, -72, 48, 6, 7,
    600, 604, -56, 48, 8, 9,
    604, 608, -40, 48, 10, 11,
    608, 612, -24, 48, 12, 13,
    612, 620, -136, -24, 14, 15,
    620, 626, -136, -40, 0, 1,
    626, 630, -120, 48, 2, 3,
    630, 634, -24, 48, 4, 5,
    634, 638, -24, -24, 6, 7,
    638, 644, -24, 48, 8, 9,
    644, 648, -24, -24, 10, 11,
    648, 654, -48, 32, 12, 13,
    654, 660, 104, 184, 14, 15
};

int loadWalls[] = { // x1, y1, x2, y2, color
    1520, -3168, 1672, -3104, 0,
    1672, -3104, 1896, -3104, 0,
    1896, -3104, 2040, -3144, 0,
    2040, -3144, 2128, -3272, 0,
    2128, -3272, 2064, -3408, 0,
    2064, -3408, 1784, -3448, 0,
    1784, -3448, 1544, -3384, 0,
    1544, -3384, 1520, -3168, 0,
    1376, -3200, 1376, -3104, 2,
    1376, -3360, 1376, -3264, 2,
    1376, -3264, 1376, -3200, 2,
    1376, -3104, 1376, -2944, 2,
    1376, -2944, 1472, -2880, 2,
    1856, -2880, 1920, -2920, 2,
    1520, -3168, 1672, -3104, 2,
    1672, -3104, 1896, -3104, 2,
    1896, -3104, 2040, -3144, 2,
    2040, -3144, 2128, -3272, 2,
    2128, -3272, 2064, -3408, 2,
    2064, -3408, 1784, -3448, 2,
    1784, -3448, 1544, -3384, 2,
    1544, -3384, 1520, -3168, 2,
    2736, -3360, 2736, -3648, 2,
    2736, -3648, 2240, -3648, 2,
    2240, -3648, 1984, -3648, 2,
    1984, -3648, 1376, -3648, 2,
    2240, -2920, 2272, -3008, 2,
    2272, -3008, 2432, -3112, 2,
    2432, -3112, 2736, -3112, 2,
    2736, -3112, 2736, -3360, 2,
    1376, -3648, 1376, -3520, 2,
    1376, -3392, 1376, -3360, 2,
    1376, -3520, 1376, -3392, 2,
    1472, -2880, 1664, -2880, 2,
    1664, -2880, 1856, -2880, 2,
    1920, -2920, 2176, -2920, 2,
    2176, -2920, 2240, -2920, 2,
    1856, -2880, 1920, -2920, 4,
    2176, -2816, 1664, -2816, 4,
    1664, -2880, 1856, -2880, 4,
    1920, -2920, 2176, -2920, 4,
    2176, -2816, 2176, -2920, 4,
    1664, -2880, 1664, -2816, 4,
    1344, -3264, 1344, -3360, 6,
    1376, -3360, 1376, -3264, 6,
    1344, -3264, 1376, -3264, 6,
    1376, -3360, 1344, -3360, 6,
    1344, -3392, 1344, -3520, 8,
    1344, -3392, 1376, -3392, 8,
    1376, -3520, 1344, -3520, 8,
    1376, -3520, 1376, -3392, 8,
    1344, -3104, 1344, -3200, 10,
    1376, -3200, 1376, -3104, 10,
    1376, -3200, 1344, -3200, 10,
    1344, -3104, 1376, -3104, 10,
    2240, -4096, 2112, -4032, 12,
    2048, -3904, 2176, -3904, 12,
    2240, -4096, 2240, -3968, 12,
    2176, -3904, 2176, -3920, 12,
    2176, -3920, 2240, -3968, 12,
    2112, -4032, 2048, -3920, 12,
    2048, -3920, 2048, -3904, 12,
    2048, -3904, 2048, -3872, 14,
    2176, -3872, 2176, -3904, 14,
    2048, -3872, 2176, -3872, 14,
    2048, -3904, 2176, -3904, 14,
    2048, -3872, 2048, -3840, 0,
    2176, -3840, 2176, -3872, 0,
    2048, -3840, 2176, -3840, 0,
    2048, -3872, 2176, -3872, 0,
    2176, -3808, 2176, -3840, 2,
    2048, -3840, 2048, -3808, 2,
    2048, -3808, 2176, -3808, 2,
    2048, -3840, 2176, -3840, 2,
    2176, -3776, 2176, -3808, 4,
    2048, -3808, 2048, -3776, 4,
    2048, -3776, 2176, -3776, 4,
    2048, -3808, 2176, -3808, 4,
    1528, -3680, 1376, -3648, 6,
    1672, -3744, 1528, -3680, 6,
    1984, -3776, 1672, -3744, 6,
    1984, -3648, 1376, -3648, 6,
    1984, -3648, 1984, -3776, 6,
    2240, -3776, 2208, -3680, 8,
    2208, -3680, 2176, -3680, 8,
    2016, -3680, 1984, -3776, 8,
    2048, -3680, 2016, -3680, 8,
    2176, -3680, 2048, -3680, 8,
    2240, -3648, 1984, -3648, 8,
    1984, -3648, 1984, -3776, 8,
    2240, -3776, 2240, -3648, 8,
    2176, -3680, 2048, -3680, 10,
    2048, -3776, 2176, -3776, 10,
    2176, -3680, 2176, -3704, 10,
    2176, -3704, 2176, -3776, 10,
    2048, -3776, 2048, -3704, 10,
    2048, -3704, 2048, -3680, 10,
    2176, -2752, 2176, -2816, 12,
    2176, -2752, 1664, -2752, 12,
    2176, -2816, 1664, -2816, 12,
    1664, -2816, 1664, -2752, 12,
    1664, -2368, 1664, -2112, 14,
    1664, -2112, 2496, -2112, 14,
    2496, -2112, 2496, -2496, 14,
    2176, -2752, 1664, -2752, 14,
    2496, -2688, 2496, -2752, 14,
    1664, -2560, 1664, -2432, 14,
    2496, -2560, 2496, -2688, 14,
    1664, -2624, 1664, -2600, 14,
    1664, -2600, 1664, -2560, 14,
    1664, -2432, 1664, -2392, 14,
    1664, -2392, 1664, -2368, 14,
    2496, -2496, 2496, -2520, 14,
    2496, -2520, 2496, -2560, 14,
    2496, -2752, 2200, -2752, 14,
    2200, -2752, 2176, -2752, 14,
    2112, -2592, 2336, -2592, 14,
    2336, -2592, 2336, -2272, 14,
    2336, -2272, 2112, -2272, 14,
    2112, -2272, 2112, -2304, 14,
    2112, -2304, 2144, -2304, 14,
    2144, -2560, 2112, -2560, 14,
    2112, -2560, 2112, -2592, 14,
    2144, -2304, 2144, -2560, 14,
    1992, -2552, 1784, -2552, 14,
    1784, -2552, 1784, -2632, 14,
    1784, -2632, 1992, -2632, 14,
    1992, -2632, 1992, -2552, 14,
    1784, -2312, 1992, -2312, 14,
    1992, -2312, 1992, -2232, 14,
    1992, -2232, 1784, -2232, 14,
    1784, -2232, 1784, -2312, 14,
    1664, -2752, 1664, -2624, 14,
    1984, -2304, 1984, -2240, 0,
    1984, -2240, 1792, -2240, 0,
    1792, -2240, 1792, -2304, 0,
    1792, -2304, 1984, -2304, 0,
    1784, -2312, 1992, -2312, 0,
    1992, -2312, 1992, -2232, 0,
    1992, -2232, 1784, -2232, 0,
    1784, -2232, 1784, -2312, 0,
    1984, -2304, 1984, -2240, 2,
    1984, -2240, 1792, -2240, 2,
    1792, -2240, 1792, -2304, 2,
    1792, -2304, 1984, -2304, 2,
    1984, -2624, 1984, -2560, 4,
    1984, -2560, 1792, -2560, 4,
    1792, -2560, 1792, -2624, 4,
    1792, -2624, 1984, -2624, 4,
    1992, -2552, 1784, -2552, 4,
    1784, -2552, 1784, -2632, 4,
    1784, -2632, 1992, -2632, 4,
    1992, -2632, 1992, -2552, 4,
    1984, -2624, 1984, -2560, 6,
    1984, -2560, 1792, -2560, 6,
    1792, -2560, 1792, -2624, 6,
    1792, -2624, 1984, -2624, 6,
    2144, -2304, 2176, -2304, 8,
    2176, -2560, 2144, -2560, 8,
    2144, -2304, 2144, -2560, 8,
    2176, -2304, 2176, -2560, 8,
    1664, -2368, 1600, -2368, 10,
    1600, -2368, 1600, -2112, 10,
    2560, -2112, 2560, -2496, 10,
    2560, -2496, 2496, -2496, 10,
    1600, -2048, 1664, -2048, 10,
    1664, -2048, 2496, -2048, 10,
    2496, -2048, 2560, -2048, 10,
    2560, -2048, 2560, -2112, 10,
    1600, -2112, 1600, -2048, 10,
    1664, -2368, 1664, -2112, 10,
    1664, -2112, 2496, -2112, 10,
    2496, -2112, 2496, -2496, 10,
    1552, -2560, 1552, -2432, 12,
    1664, -2560, 1552, -2560, 12,
    1552, -2432, 1664, -2432, 12,
    1664, -2560, 1664, -2432, 12,
    1600, -2624, 1664, -2624, 14,
    1664, -2816, 1600, -2816, 14,
    1600, -2816, 1600, -2752, 14,
    1600, -2752, 1600, -2624, 14,
    1664, -2816, 1664, -2752, 14,
    1664, -2752, 1664, -2624, 14,
    1216, -2880, 1248, -2528, 0,
    1384, -2592, 1344, -2880, 0,
    1472, -2560, 1384, -2592, 0,
    1248, -2528, 1472, -2432, 0,
    1344, -2880, 1216, -2880, 0,
    1472, -2432, 1472, -2560, 0,
    1472, -2432, 1472, -2560, 2,
    1536, -2432, 1536, -2560, 2,
    1536, -2560, 1472, -2560, 2,
    1472, -2432, 1536, -2432, 2,
    1536, -2432, 1536, -2560, 4,
    1552, -2560, 1552, -2432, 4,
    1536, -2432, 1552, -2432, 4,
    1552, -2560, 1536, -2560, 4,
    1216, -3392, 1216, -3360, 6,
    1216, -3360, 1184, -3360, 6,
    1184, -3104, 1216, -3104, 6,
    1216, -3104, 1216, -3072, 6,
    1344, -3264, 1344, -3360, 6,
    1344, -3200, 1344, -3264, 6,
    1344, -3104, 1344, -3200, 6,
    1344, -3360, 1216, -3392, 6,
    1216, -3072, 1344, -3104, 6,
    928, -3104, 1184, -3104, 6,
    1184, -3360, 928, -3360, 6,
    928, -3360, 928, -3104, 6,
    928, -3392, 928, -3360, 8,
    928, -3360, 896, -3360, 8,
    1184, -3360, 1184, -3392, 8,
    896, -3104, 928, -3104, 8,
    928, -3104, 928, -3072, 8,
    1184, -3072, 1184, -3104, 8,
    1184, -3392, 928, -3392, 8,
    928, -3104, 1184, -3104, 8,
    1184, -3360, 928, -3360, 8,
    928, -3360, 928, -3104, 8,
    896, -3360, 896, -3104, 8,
    928, -3072, 1184, -3072, 8,
    1152, -3648, 1088, -3648, 10,
    1024, -3648, 960, -3648, 10,
    1280, -3552, 1152, -3648, 10,
    960, -3648, 832, -3552, 10,
    1344, -3552, 1280, -3552, 10,
    832, -3552, 704, -3552, 10,
    896, -3392, 928, -3392, 10,
    896, -3360, 896, -3392, 10,
    1184, -3392, 1216, -3392, 10,
    896, -3072, 896, -3104, 10,
    928, -3072, 896, -3072, 10,
    1216, -3072, 1184, -3072, 10,
    1344, -2880, 1344, -3104, 10,
    1184, -3392, 928, -3392, 10,
    1344, -3360, 1216, -3392, 10,
    1216, -3072, 1344, -3104, 10,
    704, -2944, 832, -2944, 10,
    832, -2944, 968, -2880, 10,
    968, -2880, 1216, -2880, 10,
    1088, -3648, 1024, -3648, 10,
    896, -3360, 896, -3104, 10,
    928, -3072, 1184, -3072, 10,
    704, -3552, 704, -3360, 10,
    704, -3104, 704, -2944, 10,
    704, -3104, 704, -3360, 10,
    1344, -2880, 1216, -2880, 10,
    1344, -3360, 1344, -3392, 10,
    1344, -3520, 1344, -3552, 10,
    1344, -3392, 1344, -3520, 10,
    1088, -3680, 1024, -3680, 12,
    1024, -3680, 1024, -3648, 12,
    1088, -3648, 1088, -3680, 12,
    1088, -3648, 1024, -3648, 12,
    704, -3104, 704, -3360, 14,
    512, -3328, 512, -3304, 14,
    512, -3160, 512, -3136, 14,
    512, -3136, 680, -3104, 14,
    680, -3104, 704, -3104, 14,
    704, -3360, 680, -3360, 14,
    680, -3360, 512, -3328, 14,
    496, -3160, 496, -3304, 14,
    512, -3304, 496, -3304, 14,
    496, -3160, 512, -3160, 14,
    496, -3160, 496, -3304, 0,
    496, -3304, 496, -3328, 0,
    496, -3328, 448, -3456, 0,
    448, -3456, 128, -3456, 0,
    128, -3008, 448, -3008, 0,
    496, -3136, 496, -3160, 0,
    448, -3008, 496, -3136, 0,
    128, -3264, 160, -3264, 0,
    160, -3264, 192, -3264, 0,
    192, -3264, 224, -3264, 0,
    224, -3264, 256, -3264, 0,
    256, -3264, 288, -3264, 0,
    288, -3264, 320, -3264, 0,
    320, -3264, 320, -3200, 0,
    320, -3200, 288, -3200, 0,
    288, -3200, 256, -3200, 0,
    256, -3200, 224, -3200, 0,
    224, -3200, 192, -3200, 0,
    192, -3200, 160, -3200, 0,
    160, -3200, 128, -3200, 0,
    128, -3200, 64, -3072, 0,
    64, -3072, 128, -3008, 0,
    128, -3456, 64, -3392, 0,
    64, -3392, 128, -3264, 0,
    256, -3136, 320, -3136, 0,
    320, -3136, 320, -3072, 0,
    320, -3072, 256, -3072, 0,
    256, -3072, 256, -3136, 0,
    256, -3392, 320, -3392, 0,
    320, -3392, 320, -3328, 0,
    320, -3328, 256, -3328, 0,
    256, -3328, 256, -3392, 0,
    288, -3264, 320, -3264, 2,
    320, -3264, 320, -3200, 2,
    320, -3200, 288, -3200, 2,
    288, -3264, 288, -3200, 2,
    256, -3264, 288, -3264, 4,
    288, -3200, 256, -3200, 4,
    256, -3264, 256, -3200, 4,
    288, -3264, 288, -3200, 4,
    256, -3392, 320, -3392, 6,
    320, -3392, 320, -3328, 6,
    320, -3328, 256, -3328, 6,
    256, -3328, 256, -3392, 6,
    256, -3136, 320, -3136, 8,
    320, -3136, 320, -3072, 8,
    320, -3072, 256, -3072, 8,
    256, -3072, 256, -3136, 8,
    224, -3264, 256, -3264, 10,
    256, -3200, 224, -3200, 10,
    224, -3264, 224, -3200, 10,
    256, -3264, 256, -3200, 10,
    192, -3264, 224, -3264, 12,
    224, -3200, 192, -3200, 12,
    192, -3264, 192, -3200, 12,
    224, -3264, 224, -3200, 12,
    160, -3264, 192, -3264, 14,
    192, -3200, 160, -3200, 14,
    160, -3264, 160, -3200, 14,
    192, -3264, 192, -3200, 14,
    64, -3648, -640, -3648, 0,
    -640, -3648, -768, -3520, 0,
    -768, -3520, -768, -2944, 0,
    -768, -2944, -640, -2816, 0,
    -640, -2816, 64, -2816, 0,
    64, -3648, -640, -3520, 0,
    -640, -3520, -640, -2944, 0,
    -640, -2944, 64, -2816, 0,
    -256, -3328, -320, -3296, 2,
    -320, -3168, -256, -3136, 2,
    -64, -3136, -64, -3328, 2,
    -128, -3328, -256, -3328, 2,
    -256, -3136, -128, -3136, 2,
    -320, -3296, -320, -3168, 2,
    -128, -3136, -88, -3136, 2,
    -88, -3136, -64, -3136, 2,
    -64, -3328, -88, -3328, 2,
    -88, -3328, -128, -3328, 2,
    -240, -3264, -208, -3264, 2,
    -208, -3264, -192, -3248, 2,
    -192, -3248, -192, -3216, 2,
    -192, -3216, -208, -3200, 2,
    -208, -3200, -240, -3200, 2,
    -240, -3200, -256, -3216, 2,
    -256, -3216, -256, -3248, 2,
    -256, -3248, -240, -3264, 2,
    -256, -3120, -336, -3120, 4,
    -336, -3120, -336, -3168, 4,
    -336, -3296, -336, -3344, 4,
    -336, -3344, -256, -3344, 4,
    -128, -3344, -96, -3344, 4,
    -96, -3344, 64, -3520, 4,
    -96, -3120, -128, -3120, 4,
    64, -2944, -96, -3120, 4,
    -256, -3344, -128, -3344, 4,
    -128, -3120, -256, -3120, 4,
    -336, -3168, -336, -3296, 4,
    64, -2816, 64, -2944, 4,
    64, -3520, 64, -3648, 4,
    64, -3648, -640, -3520, 4,
    -640, -3520, -640, -2944, 4,
    -640, -2944, 64, -2816, 4,
    -128, -3120, -128, -3136, 6,
    -256, -3136, -256, -3120, 6,
    -256, -3136, -128, -3136, 6,
    -128, -3120, -256, -3120, 6,
    -240, -3264, -208, -3264, 8,
    -208, -3264, -192, -3248, 8,
    -192, -3248, -192, -3216, 8,
    -192, -3216, -208, -3200, 8,
    -208, -3200, -240, -3200, 8,
    -240, -3200, -256, -3216, 8,
    -256, -3216, -256, -3248, 8,
    -256, -3248, -240, -3264, 8,
    -320, -3296, -336, -3296, 10,
    -336, -3168, -320, -3168, 10,
    -320, -3296, -320, -3168, 10,
    -336, -3168, -336, -3296, 10,
    -256, -3344, -256, -3328, 12,
    -128, -3328, -128, -3344, 12,
    -128, -3328, -256, -3328, 12,
    -256, -3344, -128, -3344, 12,
    128, -3264, 128, -3200, 14,
    128, -3200, 64, -3072, 14,
    64, -3392, 128, -3264, 14,
    64, -3392, 48, -3392, 14,
    48, -3392, -64, -3328, 14,
    -64, -3136, 48, -3072, 14,
    48, -3072, 64, -3072, 14,
    -64, -3136, -64, -3328, 14,
    128, -3264, 160, -3264, 0,
    160, -3200, 128, -3200, 0,
    160, -3264, 160, -3200, 0,
    128, -3264, 128, -3200, 0,
    2880, -2912, 2880, -2880, 2,
    2752, -3048, 2752, -2912, 2,
    2752, -2784, 2944, -2656, 2,
    2752, -3048, 3048, -2880, 2,
    2880, -2880, 2752, -2800, 2,
    2752, -2800, 2752, -2784, 2,
    2944, -2656, 2960, -2656, 2,
    2960, -2656, 3048, -2880, 2,
    2752, -2912, 2880, -2912, 2,
    2752, -2784, 2624, -2784, 4,
    2752, -2560, 2944, -2656, 4,
    2752, -2784, 2944, -2656, 4,
    2624, -2784, 2752, -2560, 4,
    2752, -3584, 2752, -3360, 6,
    2752, -3360, 2944, -3536, 6,
    2944, -3536, 2752, -3584, 6,
    2944, -3648, 2752, -3584, 8,
    3072, -3648, 3072, -4000, 8,
    2944, -3776, 2944, -3648, 8,
    2944, -3536, 3072, -3648, 8,
    2944, -3536, 2752, -3584, 8,
    2944, -3904, 2944, -3776, 8,
    2944, -4000, 2944, -3904, 8,
    3072, -4000, 2944, -4000, 8,
    3136, -3072, 3304, -3040, 10,
    3280, -3320, 2984, -3200, 10,
    2984, -3200, 3136, -3072, 10,
    3104, -3552, 3280, -3320, 10,
    3264, -3616, 3104, -3552, 10,
    3352, -3568, 3264, -3616, 10,
    3472, -3432, 3408, -3432, 10,
    3408, -3432, 3312, -3496, 10,
    3312, -3496, 3352, -3568, 10,
    3400, -3152, 3472, -3432, 10,
    3304, -3040, 3400, -3152, 10,
    3448, -3520, 3352, -3568, 12,
    3520, -3904, 3328, -3968, 12,
    3328, -3744, 3360, -3648, 12,
    3328, -3968, 3328, -3744, 12,
    3448, -3520, 3472, -3520, 12,
    3472, -3520, 3520, -3584, 12,
    3360, -3648, 3352, -3592, 12,
    3352, -3592, 3352, -3568, 12,
    3520, -3584, 3520, -3840, 12,
    3520, -3840, 3520, -3904, 12,
    3472, -3432, 3408, -3432, 14,
    3408, -3432, 3312, -3496, 14,
    3312, -3496, 3352, -3568, 14,
    3472, -3432, 3448, -3520, 14,
    3448, -3520, 3352, -3568, 14,
    3048, -2880, 3048, -2944, 0,
    3048, -2944, 3304, -3040, 0,
    3136, -3072, 3304, -3040, 0,
    3112, -3360, 2944, -3536, 0,
    2816, -3232, 3112, -3360, 0,
    3280, -3320, 2984, -3200, 0,
    2976, -3072, 2816, -3232, 0,
    2984, -3200, 3136, -3072, 0,
    3264, -3616, 3072, -3648, 0,
    2944, -3536, 3072, -3648, 0,
    2752, -3048, 3048, -2880, 0,
    3104, -3552, 3280, -3320, 0,
    3264, -3616, 3104, -3552, 0,
    2752, -3048, 2976, -3072, 0,
    3112, -3360, 2944, -3536, 2,
    2816, -3232, 3112, -3360, 2,
    2976, -3072, 2816, -3232, 2,
    2752, -3360, 2944, -3536, 2,
    2752, -3048, 2976, -3072, 2,
    2752, -3360, 2752, -3112, 2,
    2752, -3112, 2752, -3048, 2,
    3680, -3904, 3584, -3904, 4,
    3744, -3808, 3680, -3904, 4,
    3584, -3840, 3616, -3776, 4,
    3616, -3776, 3552, -3552, 4,
    3552, -3552, 3552, -3392, 4,
    3552, -3392, 3648, -3264, 4,
    3680, -3552, 3744, -3808, 4,
    3680, -3392, 3680, -3552, 4,
    3808, -3264, 3680, -3392, 4,
    3648, -3264, 3496, -3032, 4,
    3584, -2880, 3808, -3264, 4,
    3496, -3032, 3456, -3032, 4,
    3360, -2880, 3584, -2880, 4,
    3304, -3040, 3400, -3152, 4,
    3584, -3840, 3584, -3904, 4,
    3304, -3040, 3320, -3040, 4,
    3320, -3040, 3360, -2880, 4,
    3456, -3032, 3416, -3152, 4,
    3416, -3152, 3400, -3152, 4,
    2176, -2304, 2208, -2304, 6,
    2208, -2560, 2176, -2560, 6,
    2176, -2304, 2176, -2560, 6,
    2208, -2304, 2208, -2560, 6,
    2208, -2304, 2304, -2304, 8,
    2304, -2304, 2304, -2560, 8,
    2304, -2560, 2208, -2560, 8,
    2208, -2304, 2208, -2560, 8,
    2520, -2560, 2752, -2560, 10,
    2624, -2784, 2520, -2688, 10,
    2496, -2560, 2520, -2560, 10,
    2520, -2688, 2496, -2688, 10,
    2496, -2560, 2496, -2688, 10,
    2624, -2784, 2752, -2560, 10,
    2752, -3360, 2736, -3360, 12,
    2736, -3112, 2752, -3112, 12,
    2752, -3360, 2752, -3112, 12,
    2736, -3112, 2736, -3360, 12,
    2736, -3648, 2488, -3744, 14,
    2488, -3744, 2240, -3776, 14,
    2736, -3648, 2240, -3648, 14,
    2240, -3776, 2240, -3648, 14,
    2856, -4160, 2888, -4160, 0,
    2888, -4160, 2912, -4160, 0,
    3160, -4352, 3128, -4352, 0,
    3128, -4352, 3104, -4352, 0,
    3104, -4160, 3128, -4160, 0,
    3128, -4160, 3160, -4160, 0,
    2912, -4352, 2888, -4352, 0,
    2888, -4352, 2856, -4352, 0,
    2888, -4352, 2888, -4320, 0,
    2888, -4320, 2888, -4192, 0,
    2888, -4192, 2888, -4160, 0,
    3128, -4320, 3128, -4352, 0,
    3128, -4160, 3128, -4192, 0,
    3128, -4192, 3128, -4320, 0,
    2912, -4160, 3104, -4160, 0,
    3104, -4352, 2912, -4352, 0,
    2856, -4352, 2856, -4160, 0,
    3160, -4160, 3160, -4352, 0,
    3200, -4128, 3328, -4128, 2,
    2688, -4128, 2816, -4128, 2,
    2816, -4128, 2856, -4160, 2,
    3160, -4160, 3200, -4128, 2,
    3104, -4352, 3104, -4384, 2,
    3104, -4384, 3160, -4384, 2,
    3160, -4384, 3160, -4352, 2,
    2856, -4352, 2856, -4384, 2,
    2856, -4384, 2912, -4384, 2,
    2912, -4384, 2912, -4352, 2,
    3328, -4544, 3072, -4544, 2,
    2944, -4544, 2688, -4544, 2,
    3104, -4352, 2912, -4352, 2,
    2688, -4544, 2688, -4128, 2,
    3328, -4128, 3328, -4544, 2,
    2856, -4352, 2856, -4160, 2,
    3160, -4160, 3160, -4352, 2,
    2944, -4544, 3072, -4544, 2,
    3072, -4544, 3072, -4608, 4,
    2944, -4608, 2944, -4544, 4,
    2944, -4544, 3072, -4544, 4,
    3072, -4608, 3040, -4608, 4,
    2976, -4608, 2944, -4608, 4,
    3024, -4592, 2992, -4592, 4,
    2992, -4600, 3024, -4600, 4,
    3024, -4600, 3024, -4592, 4,
    2992, -4592, 2992, -4600, 4,
    3040, -4608, 2976, -4608, 4,
    3024, -4592, 2992, -4592, 6,
    2992, -4600, 3024, -4600, 6,
    3024, -4600, 3024, -4592, 6,
    2992, -4592, 2992, -4600, 6,
    2976, -4632, 2976, -4608, 8,
    3040, -4608, 3040, -4632, 8,
    3040, -4632, 2976, -4632, 8,
    3040, -4608, 2976, -4608, 8,
    3040, -4632, 3040, -4648, 10,
    2976, -4648, 2976, -4632, 10,
    2976, -4648, 3040, -4648, 10,
    3040, -4632, 2976, -4632, 10,
    3040, -4672, 3104, -4672, 12,
    2912, -4672, 2976, -4672, 12,
    3104, -4672, 3104, -4864, 12,
    2912, -4864, 2912, -4800, 12,
    2912, -4800, 2912, -4736, 12,
    2912, -4736, 2912, -4672, 12,
    3104, -4864, 2912, -4864, 12,
    2976, -4672, 3040, -4672, 12,
    3024, -4840, 2992, -4840, 12,
    2992, -4848, 3024, -4848, 12,
    3024, -4848, 3024, -4840, 12,
    2992, -4840, 2992, -4848, 12,
    3024, -4840, 2992, -4840, 14,
    2992, -4848, 3024, -4848, 14,
    3024, -4848, 3024, -4840, 14,
    2992, -4840, 2992, -4848, 14,
    3040, -4648, 3040, -4672, 0,
    2976, -4672, 2976, -4648, 0,
    2976, -4648, 3040, -4648, 0,
    2976, -4672, 3040, -4672, 0,
    2752, -3776, 2752, -3904, 2,
    2688, -3776, 2720, -3904, 2,
    2688, -3776, 2752, -3776, 2,
    2752, -3904, 2720, -3904, 2,
    2784, -3776, 2784, -3904, 4,
    2752, -3776, 2752, -3904, 4,
    2752, -3776, 2784, -3776, 4,
    2784, -3904, 2752, -3904, 4,
    2816, -3776, 2816, -3904, 6,
    2784, -3776, 2784, -3904, 6,
    2784, -3776, 2816, -3776, 6,
    2816, -3904, 2784, -3904, 6,
    2848, -3776, 2848, -3904, 8,
    2816, -3776, 2816, -3904, 8,
    2816, -3776, 2848, -3776, 8,
    2848, -3904, 2816, -3904, 8,
    2880, -3776, 2880, -3904, 10,
    2848, -3776, 2848, -3904, 10,
    2848, -3776, 2880, -3776, 10,
    2880, -3904, 2848, -3904, 10,
    2880, -3776, 2880, -3904, 12,
    2880, -3776, 2912, -3776, 12,
    2912, -3904, 2880, -3904, 12,
    2912, -3776, 2912, -3904, 12,
    2240, -4096, 2240, -3968, 14,
    2368, -3968, 2368, -4096, 14,
    2368, -4096, 2344, -4096, 14,
    2344, -4096, 2264, -4096, 14,
    2264, -4096, 2240, -4096, 14,
    2240, -3968, 2264, -3968, 14,
    2264, -3968, 2344, -3968, 14,
    2344, -3968, 2368, -3968, 14,
    2368, -3968, 2368, -4096, 0,
    2632, -3792, 2688, -3920, 0,
    2688, -3920, 2672, -3920, 0,
    2672, -3920, 2368, -4096, 0,
    2368, -3968, 2616, -3792, 0,
    2616, -3792, 2632, -3792, 0,
    2688, -3776, 2720, -3904, 2,
    2632, -3792, 2688, -3920, 2,
    2632, -3792, 2688, -3776, 2,
    2720, -3904, 2688, -3920, 2,
    3072, -4000, 2944, -4000, 4,
    2944, -4016, 2944, -4000, 4,
    3072, -4000, 3072, -4016, 4,
    3072, -4016, 2944, -4016, 4,
    2944, -3904, 2912, -3904, 6,
    2912, -3776, 2944, -3776, 6,
    2944, -3904, 2944, -3776, 6,
    2912, -3776, 2912, -3904, 6,
    2912, -4160, 2912, -4128, 8,
    3104, -4128, 3104, -4160, 8,
    2912, -4160, 3104, -4160, 8,
    2912, -4128, 2944, -4032, 8,
    3072, -4032, 3104, -4128, 8,
    2944, -4032, 3072, -4032, 8,
    2944, -4032, 2944, -4016, 10,
    3072, -4016, 3072, -4032, 10,
    3072, -4016, 2944, -4016, 10,
    2944, -4032, 3072, -4032, 10,
    3200, -3968, 3200, -3744, 12,
    3328, -3968, 3328, -3744, 12,
    3328, -3968, 3304, -3968, 12,
    3304, -3968, 3200, -3968, 12,
    3200, -3744, 3304, -3744, 12,
    3304, -3744, 3328, -3744, 12,
    3520, -3840, 3520, -3904, 14,
    3584, -3840, 3584, -3904, 14,
    3520, -3840, 3536, -3840, 14,
    3536, -3840, 3584, -3840, 14,
    3584, -3904, 3536, -3904, 14,
    3536, -3904, 3520, -3904, 14,
};



GLuint LoadBMPTexture(const char* filename) {
    FILE* file = nullptr;
    errno_t err = fopen_s(&file, filename, "rb");
    if (err != 0 || file == nullptr) {
        std::cerr << "Erro: não foi possível abrir a textura " << filename << std::endl;
        return 0;
    }

    unsigned char header[54];
    fread(header, sizeof(unsigned char), 54, file);

    int width = *(int*)&header[18];
    int height = *(int*)&header[22];
    int size = 3 * width * height;

    unsigned char* data = new unsigned char[size];
    fread(data, sizeof(unsigned char), size, file);
    fclose(file);

    // BMP armazena em BGR, converte para RGB
    for (int i = 0; i < size; i += 3) {
        std::swap(data[i], data[i + 2]);
    }

    GLuint textureID;
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_2D, textureID);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0,
        GL_RGB, GL_UNSIGNED_BYTE, data);

    delete[] data;
    return textureID;
}

void init() {
    int i;
    for (i = 0; i < 360; i++) {
        M.cos[i] = cos(i * M_PI / 180);
        M.sin[i] = sin(i * M_PI / 180);
    }

    P.x = 70;
    P.y = -110;
    P.z = 20;
    P.angle = 0;
    P.look = 0;

    int s, w, v1 = 0, v2 = 0;
    for (s = 0; s < numSect; s++) {
        S[s].ws = loadSectors[v1 + 0];
        S[s].we = loadSectors[v1 + 1];
        S[s].z1 = loadSectors[v1 + 2];
        S[s].z2 = loadSectors[v1 + 3] - loadSectors[v1 + 2];
        S[s].c1 = loadSectors[v1 + 4];
        S[s].c2 = loadSectors[v1 + 5];
        v1 += 6;
        for (w = S[s].ws; w < S[s].we; w++) {
            W[w].x1 = loadWalls[v2 + 0];
            W[w].y1 = loadWalls[v2 + 1];
            W[w].x2 = loadWalls[v2 + 2];
            W[w].y2 = loadWalls[v2 + 3];
            W[w].color = loadWalls[v2 + 4];
            v2 += 5;
        }
    }
    Mouse.lastX = GLSW / 2;
    Mouse.lastY = GLSH / 2;
    Mouse.first = 1;
    Mouse.sensibilidade = 0.1f; // ajuste conforme desejar
    glutSetCursor(GLUT_CURSOR_NONE);

    floorTexture = LoadBMPTexture((ASSETS_PATH + "parede.bmp").c_str());
    glEnable(GL_TEXTURE_2D);
    printf("ID da textura: %u\n", floorTexture);
}



int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(GLSW, GLSH);
    glutCreateWindow("");
    glPointSize(pixelScale);
    glutPassiveMotionFunc(mouseMotion);
    gluOrtho2D(0, GLSW, 0, GLSH);
    init();
    glutDisplayFunc(display);
    glutKeyboardFunc(KeysDown);
    glutKeyboardUpFunc(KeysUp);
    glutMainLoop();

    return 0;
}
